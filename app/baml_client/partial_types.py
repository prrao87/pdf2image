###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum
from pydantic import BaseModel, ConfigDict
from typing import Dict, List, Optional, Union, Literal

from . import types
from .types import Checked, Check

###############################################################################
#
#  These types are used for streaming, for when an instance of a type
#  is still being built up and any of its fields is not yet fully available.
#
###############################################################################


class EndingBalanceItem(BaseModel):
    date: Optional[str] = None
    amount: Optional[float] = None

class FinancialSummary(BaseModel):
    bank_name: Optional[str] = None
    business_name: Optional[str] = None
    business_account_number: Optional[str] = None
    business_address: Optional[str] = None
    beginning_balance: Optional[float] = None
    ending_balances: List["EndingBalanceItem"]

class PageHasTransactions(BaseModel):
    page_number: Optional[int] = None
    has_transactions: Optional[bool] = None

class Transaction(BaseModel):
    date: Optional[str] = None
    description: Optional[Union[Optional[str], Optional[None]]] = None
    amount: Optional[float] = None
    transaction_type: Optional[types.TransactionType] = None
